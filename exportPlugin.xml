<?xml version="1.0" encoding="UTF-8"?>
<project name="org.eclipse.imp.xform" default="build.update.jar" basedir=".">
	<import file="../org.eclipse.imp.runtime.feature/buildCommon.xml"/>
	<import file="../org.eclipse.imp.update/buildPluginCommon.xml"/>

	<target name="init" depends="properties">
		<loadfile property="plugin.id" srcfile="META-INF/MANIFEST.MF">
			<filterchain>
				<containsregex pattern="Bundle-SymbolicName:"/>
				<replaceregex pattern="Bundle-SymbolicName: ([^;]*)(;.*)?" replace="\1"/>
				<!-- Don't know why we need striplinebreaks here and not in defining javacSource (see below) -->
				<striplinebreaks/>
			</filterchain>
		</loadfile>
		<!-- <echo message="Plugin ID = ${plugin.id}"/> -->

		<loadfile property="plugin.version" srcfile="META-INF/MANIFEST.MF">
			<filterchain>
				<containsregex pattern="Bundle-Version:"/>
				<replaceregex pattern="Bundle-Version: (.*)" replace="\1"/>
				<!-- Don't know why we need striplinebreaks here and not in defining javacSource (see below) -->
				<striplinebreaks/>
			</filterchain>
		</loadfile>
		<!-- <echo message="Plugin version = ${plugin.version}"/> -->

		<property name="plugin.jar.name" value="${plugin.id}_${plugin.version}.jar"/>
		<property name="plugin.zip.name" value="${plugin.id}_${plugin.version}.zip"/>
		<property name="plugin.src.zip" value="${plugin.id}src.zip"/>
		<property name="plugin.destination" value="${basedir}"/>
		<condition property="pluginTemp" value="${buildTempFolder}/plugins">
			<isset property="buildTempFolder"/>
		</condition>
		<property name="pluginTemp" value="${basedir}"/>
		<condition property="build.result.folder" value="${pluginTemp}/${plugin.id}">
			<isset property="buildTempFolder"/>
		</condition>
		<property name="build.result.folder" value="${basedir}"/>
		<property name="temp.folder" value="${basedir}/temp.folder"/>
		<property name="lpg.location" value="../lpg.runtime.java"/>
		<property name="lpg.executable" location="../lpg.generator.${baseos}_${os.arch}/lpgexe/lpg-${baseos}_${os.arch}"/>
		<property name="lpg.templates" location="${lpg.location}/templates"/>
		<property name="lpg.metatooling.location" value="../org.eclipse.imp.lpg.metatooling"/>
		<property name="lpg.metatooling.templates" location="${lpg.metatooling.location}/templates"/>
	</target>

	<target name="properties" if="eclipse.running">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
	</target>

	<!-- ================================================================================= -->

	<target name="plugin.jar" depends="init" unless="${plugin.jar.name}" description="Create jar: ${plugin.jar.name}.">
		<delete dir="${temp.folder}/${plugin.jar.name}.bin"/>
		<mkdir dir="${temp.folder}/${plugin.jar.name}.bin"/>
		<!-- run LPG to generate the parser and lexer -->
		<echo message="Running LPG to generate parser and lexer"/>
		<exec executable="${lpg.executable}" dir="src/org/eclipse/imp/xform/pattern/parser"
		      failonerror="true" output="ASTPatternParser.log">
			<arg line="-include-directory=${lpg.templates};${lpg.metatooling.templates}"/>
			<arg line="ASTPatternParser.g"/>
		</exec>
		<!-- compile the source code -->
		<javac destdir="${temp.folder}/${plugin.jar.name}.bin"
		       failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bootclasspath}" source="1.5" target="1.5">
			<compilerarg line="${compilerArg}"/>
			<classpath>
				<pathelement path="../lpg.runtime.java/bin"/>
				<pathelement path="../polyglot/classes"/>
				<pathelement path="../org.eclipse.imp.runtime/bin"/>
				<pathelement path="${eclipse.build.path}"/>
			</classpath>
			<src path="src/"/>
		</javac>
		<!-- Copy necessary resources -->
		<copy todir="${temp.folder}/${plugin.jar.name}.bin" failonerror="true" overwrite="false">
			<fileset dir="src/" excludes="**/*.java,**/package.htm*"/>
		</copy>
		<mkdir dir="${temp.folder}/${plugin.jar.name}.bin/icons"/>
		<copy todir="${temp.folder}/${plugin.jar.name}.bin/icons" failonerror="true" overwrite="false">
			<fileset dir="icons/"/>
		</copy>
		<copy file="plugin.xml" todir="${temp.folder}/${plugin.jar.name}.bin" failonerror="true"/>
		<mkdir dir="${build.result.folder}"/>
		<jar destfile="${build.result.folder}/${plugin.jar.name}" basedir="${temp.folder}/${plugin.jar.name}.bin"
			manifest="META-INF/MANIFEST.MF"/>
		<delete dir="${temp.folder}/${plugin.jar.name}.bin"/>
	</target>
</project>
